%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.9.5 (Build 13F34) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 200 55
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 200 55
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.3611 0.2118 0.0535 0.4046 0.6783 0.1088 0.1848 0.1099 0.9268 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
15.26631 9.8615599 m
11.26531 9.8615599 8.0253096 7.5715599 6.4613099 5.9485602 c
6.4613099 5.9485602 2.6553099 2.1765599 0.078309998 0.87055999 c
-0.03469 0.80856001 -0.03269 0.68356001 0.12431 0.68356001 c
23.41831 0.68356001 l
28.02331 0.68356001 30.188311 2.2435601 32.92131 4.6905599 c
32.92131 4.6905599 36.900311 8.3885603 39.629311 9.5825596 c
39.904308 9.6865597 39.83931 9.8615599 39.629311 9.8615599 c
15.26631 9.8615599 l
15.26631 9.8615599 l
h
55.284309 9.8615599 m
51.28331 9.8615599 48.04631 7.5715599 46.479309 5.9485602 c
46.479309 5.9485602 42.674309 2.1765599 40.097309 0.87055999 c
39.983311 0.80856001 39.98531 0.68356001 40.143311 0.68356001 c
63.483311 0.68356001 l
68.087311 0.68356001 70.254311 2.2435601 72.986313 4.6905599 c
72.986313 4.6905599 76.92131 8.3885603 79.648308 9.5825596 c
79.923309 9.6865597 79.903313 9.8615599 79.694313 9.8615599 c
55.284309 9.8615599 l
55.284309 9.8615599 l
h
95.348312 9.8615599 m
91.348312 9.8615599 88.109306 7.5715599 86.543312 5.9485602 c
86.543312 5.9485602 82.737312 2.1765599 80.160309 0.87055999 c
80.048309 0.80856001 80.051308 0.68356001 80.208313 0.68356001 c
103.54831 0.68356001 l
108.15231 0.68356001 110.27131 2.2435601 113.00531 4.6905599 c
113.00531 4.6905599 116.98431 8.3885603 119.71231 9.5825596 c
119.98831 9.6865597 119.96831 9.8615599 119.75931 9.8615599 c
95.348312 9.8615599 l
95.348312 9.8615599 l
h
135.3663 9.8615599 m
131.36731 9.8615599 128.17432 7.5715599 126.60731 5.9485602 c
126.60731 5.9485602 122.75531 2.1765599 120.17731 0.87055999 c
120.06531 0.80856001 120.06831 0.68356001 120.22531 0.68356001 c
143.56432 0.68356001 l
148.16931 0.68356001 150.33531 2.2435601 153.06831 4.6905599 c
153.06831 4.6905599 157.05031 8.3885603 159.77731 9.5825596 c
160.05431 9.6865597 159.98531 9.8615599 159.77731 9.8615599 c
135.3663 9.8615599 l
135.3663 9.8615599 l
h
175.42931 9.8615599 m
171.42931 9.8615599 168.18831 7.5715599 166.62431 5.9485602 c
166.62431 5.9485602 162.81631 2.1765599 160.24031 0.87055999 c
160.12631 0.80856001 160.13031 0.68356001 160.28632 0.68356001 c
183.62831 0.68356001 l
188.23232 0.68356001 190.39632 2.2435601 193.13231 4.6905599 c
193.13231 4.6905599 197.06831 8.3885603 199.79231 9.5825596 c
200.06731 9.6865597 200.05031 9.8615599 199.83931 9.8615599 c
175.42931 9.8615599 l
175.42931 9.8615599 l
h
175.42931 9.8615599 m
W*
0 0 200 55 rc
-5.0007434 14.86156 m
204.99823 14.86156 l
204.99823 -4.3164401 l
-5.0007434 -4.3164401 l
h
-5.0007434 14.86156 m
f*
Q
0.078699999 w
q
0 0 200 55 rc
1 0 0 -1 -0.00074354681 9.8615599 cm
15.267054 0 m
11.266053 0 8.0260534 2.29 6.4620538 3.9130001 c
6.4620538 3.9130001 2.6560535 7.6849999 0.079053544 8.9910002 c
-0.033946455 9.0530005 -0.031946454 9.1780005 0.12505354 9.1780005 c
23.419054 9.1780005 l
28.024054 9.1780005 30.189054 7.618 32.922054 5.171 c
32.922054 5.171 36.901054 1.473 39.630054 0.27900001 c
39.905052 0.175 39.840054 0 39.630054 0 c
15.267054 0 l
15.267054 0 l
h
55.285053 0 m
51.284054 0 48.047054 2.29 46.480053 3.9130001 c
46.480053 3.9130001 42.675053 7.6849999 40.098053 8.9910002 c
39.984055 9.0530005 39.986053 9.1780005 40.144054 9.1780005 c
63.484055 9.1780005 l
68.088051 9.1780005 70.255051 7.618 72.987053 5.171 c
72.987053 5.171 76.92205 1.473 79.649055 0.27900001 c
79.924057 0.175 79.904053 0 79.695053 0 c
55.285053 0 l
55.285053 0 l
h
95.349052 0 m
91.349052 0 88.110054 2.29 86.544052 3.9130001 c
86.544052 3.9130001 82.738052 7.6849999 80.161057 8.9910002 c
80.049057 9.0530005 80.052055 9.1780005 80.209053 9.1780005 c
103.54906 9.1780005 l
108.15305 9.1780005 110.27206 7.618 113.00605 5.171 c
113.00605 5.171 116.98505 1.473 119.71305 0.27900001 c
119.98905 0.175 119.96906 0 119.76006 0 c
95.349052 0 l
95.349052 0 l
h
135.36705 0 m
131.36806 0 128.17505 2.29 126.60806 3.9130001 c
126.60806 3.9130001 122.75605 7.6849999 120.17805 8.9910002 c
120.06606 9.0530005 120.06905 9.1780005 120.22605 9.1780005 c
143.56505 9.1780005 l
148.17006 9.1780005 150.33606 7.618 153.06905 5.171 c
153.06905 5.171 157.05106 1.473 159.77806 0.27900001 c
160.05505 0.175 159.98605 0 159.77806 0 c
135.36705 0 l
135.36705 0 l
h
175.43005 0 m
171.43005 0 168.18906 2.29 166.62506 3.9130001 c
166.62506 3.9130001 162.81705 7.6849999 160.24106 8.9910002 c
160.12706 9.0530005 160.13106 9.1780005 160.28705 9.1780005 c
183.62906 9.1780005 l
188.23305 9.1780005 190.39705 7.618 193.13306 5.171 c
193.13306 5.171 197.06905 1.473 199.79306 0.27900001 c
200.06805 0.175 200.05106 0 199.84006 0 c
175.43005 0 l
175.43005 0 l
h
175.43005 0 m
S
Q
q
96.793312 54.164558 m
88.278313 54.164558 79.975311 51.636559 79.975311 43.170559 c
79.975311 28.50956 105.55031 36.254559 105.55031 27.284559 c
105.55031 24.360559 101.01531 23.184561 97.35231 23.184561 c
90.772308 23.184561 86.237312 24.163561 80.488312 27.610559 c
80.488312 20.250561 l
84.774307 18.837561 90.605309 18.153561 96.933311 18.153561 c
105.76631 18.153561 114.03031 20.434561 114.03031 29.101561 c
114.03031 44.409561 88.454308 37.531559 88.454308 45.033562 c
88.454308 48.054562 92.558311 49.086559 96.142311 49.086559 c
102.17331 49.086559 108.68431 47.32156 112.26131 44.00956 c
112.26131 51.83556 l
107.63231 53.296558 101.48631 54.164558 96.793312 54.164558 c
96.793312 54.164558 l
h
141.98131 54.07156 m
126.62231 54.07156 116.45231 46.68856 116.45231 35.437561 c
116.45231 25.111561 125.78631 18.20056 139.74532 18.20056 c
144.2673 18.20056 148.30331 18.79356 153.02132 19.92556 c
153.02132 28.63756 l
149.68631 25.11356 145.72231 23.69956 141.46831 23.69956 c
133.2243 23.69956 127.58531 28.83556 127.58531 36.23156 c
127.58531 43.526562 133.4313 48.85656 141.60631 48.85656 c
146.06131 48.85656 149.63231 47.236561 152.50731 44.429562 c
152.50731 53.14156 l
149.51831 53.757561 145.76932 54.07156 141.98131 54.07156 c
141.98131 54.07156 l
h
177.80431 54.07156 m
164.56931 54.07156 155.21031 46.45256 155.21031 35.71756 c
155.21031 25.18656 163.6143 18.19956 176.12831 18.19956 c
189.42331 18.19956 198.58131 25.62756 198.58131 36.414558 c
198.5843 46.998562 190.25632 54.07156 177.80431 54.07156 c
177.80431 54.07156 l
h
1.38431 53.000561 m
1.38431 44.754559 l
4.2613101 46.984558 10.27831 47.825562 16.850309 47.875561 c
16.850309 25.375561 l
16.850309 22.103559 16.56131 21.17156 15.17331 19.458561 c
28.17131 19.458561 l
26.712311 21.17156 26.493311 22.103559 26.493311 25.375561 c
26.493311 48.06356 l
32.189308 48.013561 38.989311 46.986561 41.86631 44.753559 c
41.86631 52.999561 l
1.38431 52.999561 l
1.38431 53.000561 l
1.38431 53.000561 l
h
45.361309 53.000561 m
46.72131 51.288559 46.99131 50.312561 46.99131 47.03756 c
46.99131 25.375561 l
46.99131 22.103559 46.745312 21.12056 45.454311 19.458561 c
76.85331 19.458561 l
76.85331 27.610559 l
72.545311 24.54356 64.346313 24.53256 61.014309 24.583561 c
56.44931 24.583561 l
56.44931 33.94656 l
59.80331 33.94656 l
62.076309 33.94656 66.177307 33.677559 68.56131 32.96756 c
68.56131 39.954559 l
66.211311 39.199558 62.069309 38.975559 59.80331 38.975559 c
56.44931 38.975559 l
56.44931 47.871559 l
61.014309 47.871559 l
65.093307 47.871559 72.187309 47.027561 74.850311 44.796558 c
74.850311 52.99556 l
45.361309 52.99556 l
45.361309 53.000561 l
45.361309 53.000561 l
h
176.92232 48.993561 m
183.85431 48.993561 188.42831 43.25856 188.42831 36.18256 c
188.42831 29.10656 183.85431 23.37056 176.92232 23.37056 c
169.8773 23.37056 165.3663 29.10656 165.3663 36.18256 c
165.36731 43.257561 169.8773 48.993561 176.92232 48.993561 c
176.92232 48.993561 l
h
176.92232 48.993561 m
W*
0 0 200 55 rc
-3.61569 59.164558 m
203.58131 59.164558 l
203.58131 13.15356 l
-3.61569 13.15356 l
h
-3.61569 59.164558 m
f*
Q
0.029999999 w
q
0 0 200 55 rc
1 0 0 -1 1.38431 54.164558 cm
95.408997 0 m
86.893997 0 78.591003 2.5280001 78.591003 10.994 c
78.591003 25.655001 104.166 17.91 104.166 26.879999 c
104.166 29.804001 99.630997 30.98 95.968002 30.98 c
89.388 30.98 84.852997 30.000999 79.103996 26.554001 c
79.103996 33.914001 l
83.389999 35.327 89.221001 36.011002 95.549004 36.011002 c
104.382 36.011002 112.646 33.73 112.646 25.063 c
112.646 9.7550001 87.07 16.632999 87.07 9.1309996 c
87.07 6.1100001 91.174004 5.0780001 94.758003 5.0780001 c
100.789 5.0780001 107.3 6.8429999 110.877 10.155 c
110.877 2.329 l
106.248 0.86799997 100.102 0 95.408997 0 c
95.408997 0 l
h
140.597 0.093000002 m
125.238 0.093000002 115.068 7.4759998 115.068 18.726999 c
115.068 29.052999 124.402 35.964001 138.36099 35.964001 c
142.883 35.964001 146.91901 35.370998 151.63699 34.238998 c
151.63699 25.527 l
148.302 29.051001 144.338 30.465 140.084 30.465 c
131.84 30.465 126.201 25.329 126.201 17.933001 c
126.201 10.638 132.047 5.3080001 140.222 5.3080001 c
144.677 5.3080001 148.248 6.928 151.123 9.7349997 c
151.123 1.023 l
148.134 0.40700001 144.38499 0.093000002 140.597 0.093000002 c
140.597 0.093000002 l
h
176.42 0.093000002 m
163.185 0.093000002 153.826 7.7119999 153.826 18.447001 c
153.826 28.978001 162.23 35.965 174.744 35.965 c
188.039 35.965 197.19701 28.537001 197.19701 17.75 c
197.2 7.1659999 188.87199 0.093000002 176.42 0.093000002 c
176.42 0.093000002 l
h
0 1.164 m
0 9.4099998 l
2.8770001 7.1799998 8.8940001 6.3390002 15.466 6.289 c
15.466 28.789 l
15.466 32.061001 15.177 32.993 13.789 34.706001 c
26.787001 34.706001 l
25.327999 32.993 25.108999 32.061001 25.108999 28.789 c
25.108999 6.1009998 l
30.805 6.151 37.605 7.178 40.481998 9.4110003 c
40.481998 1.165 l
0 1.165 l
0 1.164 l
0 1.164 l
h
43.977001 1.164 m
45.337002 2.8759999 45.606998 3.852 45.606998 7.1269999 c
45.606998 28.789 l
45.606998 32.061001 45.361 33.043999 44.07 34.706001 c
75.469002 34.706001 l
75.469002 26.554001 l
71.161003 29.621 62.962002 29.632 59.630001 29.580999 c
55.064999 29.580999 l
55.064999 20.218 l
58.418999 20.218 l
60.692001 20.218 64.792999 20.487 67.177002 21.197001 c
67.177002 14.21 l
64.827003 14.965 60.685001 15.189 58.418999 15.189 c
55.064999 15.189 l
55.064999 6.2930002 l
59.630001 6.2930002 l
63.709 6.2930002 70.803001 7.1370001 73.466003 9.368 c
73.466003 1.169 l
43.977001 1.169 l
43.977001 1.164 l
43.977001 1.164 l
h
175.53799 5.171 m
182.47 5.171 187.04401 10.906 187.04401 17.982 c
187.04401 25.058001 182.47 30.794001 175.53799 30.794001 c
168.493 30.794001 163.98199 25.058001 163.98199 17.982 c
163.983 10.907 168.493 5.171 175.53799 5.171 c
175.53799 5.171 l
h
175.53799 5.171 m
S
ep
end
